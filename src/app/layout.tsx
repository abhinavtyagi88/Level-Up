'use client'
import { type Metadata } from 'next'
import {
  ClerkProvider,
  SignInButton,
  SignUpButton,
  SignedIn,
  SignedOut,
  UserButton,
} from '@clerk/nextjs'
import { usePathname } from 'next/navigation'
import Link from 'next/link'
import './globals.css'

// export const metadata: Metadata = {
//   title: 'Clerk Next.js Quickstart',
//   description: 'Generated by create next app',
// }

// Define the routes that should show the header
const headerRoutes = [
  "/dashboard/:path*",
  "/forum/:path*",
  "/api/auth/:path*",
  "/",
  "/public/:path*",
  "/api/:path*",
  "/inngest/:path*",
]

// Navigation items with their routes
const navItems = [
  { name: 'Home', href: '/' },
  { name: 'Dashboard', href: '/dashboard' },
  { name: 'Forum', href: '/forum' },
  { name: 'Public', href: '/public' },
]

export default function RootLayout({
  children,
}: Readonly<{
  children: React.ReactNode
}>) {
  return (
    <ClerkProvider>
      <html lang="en">
        <body>
          {/* Header will be conditionally rendered based on route */}
          <HeaderRouteWrapper routes={headerRoutes}>
            <header className="border-b border-gray-200 bg-white">
              <div className="mx-auto max-w-7xl px-4 sm:px-6 lg:px-8">
                <div className="flex h-16 items-center justify-between">
                  {/* Logo and Navigation Tabs */}
                  <div className="flex items-center gap-8">
                    {/* Logo */}
                    <div className="flex-shrink-0">
                      <h1 className="text-xl font-bold text-gray-900">Your App</h1>
                    </div>
                    
                    {/* Navigation Tabs */}
                    <nav className="hidden md:flex space-x-1">
                      {navItems.map((item) => (
                        <NavLink key={item.name} href={item.href}>
                          {item.name}
                        </NavLink>
                      ))}
                    </nav>
                  </div>

                  {/* Auth Buttons */}
                  <div className="flex items-center gap-4">
                    <SignedOut>
                      <SignInButton>
                        <button className="text-gray-700 hover:text-gray-900 px-3 py-2 rounded-md text-sm font-medium">
                          Sign In
                        </button>
                      </SignInButton>
                      <SignUpButton>
                        <button className="bg-[#6c47ff] text-white rounded-full font-medium text-sm px-4 py-2 cursor-pointer hover:bg-[#5a3fe0] transition-colors">
                          Sign Up
                        </button>
                      </SignUpButton>
                    </SignedOut>
                    <SignedIn>
                      <UserButton />
                    </SignedIn>
                  </div>
                </div>
              </div>

              {/* Mobile Navigation (optional) */}
              <div className="md:hidden border-t border-gray-200">
                <nav className="flex space-x-1 overflow-x-auto py-2 px-4">
                  {navItems.map((item) => (
                    <MobileNavLink key={item.name} href={item.href}>
                      {item.name}
                    </MobileNavLink>
                  ))}
                </nav>
              </div>
            </header>
          </HeaderRouteWrapper>
          {children}
        </body>
      </html>
    </ClerkProvider>
  )
}

// Client component wrapper to handle route matching
function HeaderRouteWrapper({ 
  routes, 
  children 
}: { 
  routes: string[], 
  children: React.ReactNode 
}) {
  'use client'
  
  const pathname = usePathname()
  
  // Check if current path matches any of the header routes
  const shouldShowHeader = routes.some(route => {
    const regexPattern = route
      .replace(/:\w+\*/g, '.*')
      .replace(/:\w+/g, '[^/]+')
    const regex = new RegExp(`^${regexPattern}$`)
    return regex.test(pathname || '')
  })

  if (!shouldShowHeader) {
    return null
  }

  return <>{children}</>
}

// Navigation Link Component with active state
function NavLink({ href, children }: { href: string; children: React.ReactNode }) {
  'use client'
  const pathname = usePathname()
  const isActive = pathname === href || pathname?.startsWith(`${href}/`)

  return (
    <Link
      href={href}
      className={`px-3 py-2 rounded-md text-sm font-medium transition-colors ${
        isActive
          ? 'bg-gray-100 text-gray-900 border-b-2 border-[#6c47ff]'
          : 'text-gray-600 hover:text-gray-900 hover:bg-gray-50'
      }`}
    >
      {children}
    </Link>
  )
}

// Mobile Navigation Link Component
function MobileNavLink({ href, children }: { href: string; children: React.ReactNode }) {
  'use client'
  const pathname = usePathname()
  const isActive = pathname === href || pathname?.startsWith(`${href}/`)

  return (
    <Link
      href={href}
      className={`px-3 py-2 rounded-md text-xs font-medium whitespace-nowrap ${
        isActive
          ? 'bg-gray-100 text-gray-900 border-b-2 border-[#6c47ff]'
          : 'text-gray-600 hover:text-gray-900'
      }`}
    >
      {children}
    </Link>
  )
}