'use client'
import { type Metadata } from 'next'
import {
  ClerkProvider,
  SignInButton,
  SignUpButton,
  SignedIn,
  SignedOut,
  UserButton,
} from '@clerk/nextjs'
import { usePathname } from 'next/navigation'
import './globals.css'

// export const metadata: Metadata = {
//   title: 'Clerk Next.js Quickstart',
//   description: 'Generated by create next app',
// }

// Define the routes that should show the header
const headerRoutes = [
  "/dashboard/:path*",
  "/forum/:path*",
  "/api/auth/:path*",
  "/",
  "/public/:path*",
  "/api/:path*",
  "/inngest/:path*",
]

export default function RootLayout({
  children,
}: Readonly<{
  children: React.ReactNode
}>) {
  return (
    <ClerkProvider>
      <html lang="en">
        <body>
          {/* Header will be conditionally rendered based on route */}
          <HeaderRouteWrapper routes={headerRoutes}>
            <header className="flex justify-end items-center p-4 gap-4 h-16">
              <SignedOut>
                <SignInButton />
                <SignUpButton>
                  <button className="bg-[#6c47ff] text-white rounded-full font-medium text-sm sm:text-base h-10 sm:h-12 px-4 sm:px-5 cursor-pointer">
                    Sign Up
                  </button>
                </SignUpButton>
              </SignedOut>
              <SignedIn>
                <UserButton />
              </SignedIn>
            </header>
          </HeaderRouteWrapper>
          {children}
        </body>
      </html>
    </ClerkProvider>
  )
}

// Client component wrapper to handle route matching
function HeaderRouteWrapper({ 
  routes, 
  children 
}: { 
  routes: string[], 
  children: React.ReactNode 
}) {
  'use client'
  
  const pathname = usePathname()
  
  // Check if current path matches any of the header routes
  const shouldShowHeader = routes.some(route => {
    const regexPattern = route
      .replace(/:\w+\*/g, '.*') // Convert :path* to .*
      .replace(/:\w+/g, '[^/]+') // Convert :param to [^/]+
    const regex = new RegExp(`^${regexPattern}$`)
    return regex.test(pathname || '')
  })

  if (!shouldShowHeader) {
    return null
  }

  return <>{children}</>
}